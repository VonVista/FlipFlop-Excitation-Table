{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["TopNav","className","href","class","onclick","TruthTableButton","props","onClick","value","TruthTableNumbers","TruthTableInputs","TruthTableInputFunctions","TruthTablePresentFunctions","TruthTableRow","useState","bitsState","numInputs","inputs","slice","truthTableNums","truthTableInputs","Array","fill","inputFunctions","from","keys","listTest","truthTable","React","updateState","forceUpdate","useCallback","handleClick","i","flipflopType","console","log","map","element","TruthTableRowTypeB","index","Math","floor","constructor","setConstructor","Labels","name","App","setbitsState","setNumInputs","setFlipflopType","labels","setLabels","isTableShown","setTableShown","setInputs","convertToBinary","dec","toString","length","split","makeLabels","alphabetArray","labelAppend","push","renderLabels","setRenderLabels","pow","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iOAIA,SAASA,IACP,OACE,sBAAKC,UAAU,SAAf,UACE,mBAAGC,KAAK,QAAQC,MAAM,SAAtB,kBACA,mBAAGD,KAAK,QAAR,kBACA,mBAAGA,KAAK,WAAR,qBACA,mBAAGA,KAAK,SAAR,mBACA,mBAAGA,KAAK,sBAAsBC,MAAM,OAAOC,QAAQ,eAAnD,SACE,mBAAGD,MAAM,oBAMjB,SAASE,EAAiBC,GAExB,OACE,8BACE,wBAAQC,QAAWD,EAAMC,QAASN,UAAY,SAA9C,SAAwDK,EAAME,UAKpE,SAASC,EAAkBH,GAEzB,OACE,8BACE,wBAAQL,UAAY,SAApB,SAA8BK,EAAME,UAK1C,SAASE,EAAiBJ,GAExB,OACE,8BACE,wBAAQL,UAAY,iBAApB,SAAsCK,EAAME,UAMlD,SAASG,EAAyBL,GAEhC,OACE,8BACE,wBAAQL,UAAY,2BAApB,SAAgDK,EAAME,UAK5D,SAASI,EAA2BN,GAElC,OACE,8BACE,wBAAQL,UAAY,6BAApB,SAAkDK,EAAME,UAM9D,SAASK,EAAcP,GAAO,IAAD,EAEOQ,mBAASR,EAAMS,WAFtB,mBAEpBA,EAFoB,aAGOD,mBAASR,EAAMU,YAHtB,mBAGpBA,EAHoB,aAKSF,mBAASR,EAAMW,OAAOC,MAAM,EAAEZ,EAAMS,aAL7C,mBAKpBI,EALoB,aAOaL,mBAASR,EAAMW,OAAOC,MAAMZ,EAAMS,UAAUT,EAAMS,UAAYT,EAAMU,aAPjF,mBAOpBI,EAPoB,aASiBN,mBAASO,MAAMN,GAAWO,KAAK,OAThD,mBASpBC,EAToB,aAWCT,mBAASO,MAAMG,KAAKH,MAAMN,GAAWU,UAXtC,mBAWpBC,EAXoB,aAaSZ,mBAASO,MAAMN,EAAYC,GAAWM,KAAK,OAbpD,mBAapBK,EAboB,aAeHC,IAAMd,YAArBe,EAfkB,oBAgBrBC,EAAcF,IAAMG,aAAY,kBAAMF,EAAY,MAAK,IAhBlC,EAkBmBf,oBAAS,GAlB5B,mBAqBrBkB,GArBqB,UAqBP,SAACC,GACC,GAAjBN,EAAWM,GACZN,EAAWM,GAAK,EAEO,GAAjBN,EAAWM,GACjBN,EAAWM,GAAK,IAEO,KAAjBN,EAAWM,KACjBN,EAAWM,GAAK,GAMO,MAAtB3B,EAAM4B,aACiB,GAArBf,EAAec,IAA4B,GAAjBN,EAAWM,GACtCV,EAAeU,GAAK,MAEO,GAArBd,EAAec,IAA4B,GAAjBN,EAAWM,GAC3CV,EAAeU,GAAK,MAEO,GAArBd,EAAec,IAA4B,GAAjBN,EAAWM,GAC3CV,EAAeU,GAAK,MAEO,GAArBd,EAAec,IAA4B,GAAjBN,EAAWM,GAC3CV,EAAeU,GAAK,MAGpBV,EAAeU,GAAK,IAIM,MAAtB3B,EAAM4B,aACY,GAArBf,EAAec,IAA4B,GAAjBN,EAAWM,GACtCV,EAAeU,GAAK,MAEO,GAArBd,EAAec,IAA4B,GAAjBN,EAAWM,GAC3CV,EAAeU,GAAK,MAEO,GAArBd,EAAec,IAA4B,GAAjBN,EAAWM,GAC3CV,EAAeU,GAAK,MAEO,GAArBd,EAAec,IAA4B,GAAjBN,EAAWM,GAC3CV,EAAeU,GAAK,MAGpBV,EAAeU,GAAK,IAKM,KAAtB3B,EAAM4B,aACY,GAArBf,EAAec,IAA4B,GAAjBN,EAAWM,GACtCV,EAAeU,GAAK,IAEO,GAArBd,EAAec,IAA4B,GAAjBN,EAAWM,GAC3CV,EAAeU,GAAK,IAEO,GAArBd,EAAec,IAA4B,GAAjBN,EAAWM,GAC3CV,EAAeU,GAAK,IAEO,GAArBd,EAAec,IAA4B,GAAjBN,EAAWM,GAC3CV,EAAeU,GAAK,IAGpBV,EAAeU,GAAK,IAKM,KAAtB3B,EAAM4B,eACY,GAArBf,EAAec,IAA4B,GAAjBN,EAAWM,GACtCV,EAAeU,GAAK,IAEO,GAArBd,EAAec,IAA4B,GAAjBN,EAAWM,IAGhB,GAArBd,EAAec,IAA4B,GAAjBN,EAAWM,GAF3CV,EAAeU,GAAK,IAKO,GAArBd,EAAec,IAA4B,GAAjBN,EAAWM,GAC3CV,EAAeU,GAAK,IAGpBV,EAAeU,GAAK,KAGxBE,QAAQC,IAAIb,GACZO,MAsBF,OACE,qBAAK7B,UAAY,MAAjB,SAEE,sBAAKA,UAAY,MAAjB,UACGkB,EAAekB,KAAI,SAAAC,GAAO,OACzB,cAAC7B,EAAD,CAAmBD,MAAS8B,OAG7BlB,EAAiBiB,KAAI,SAAAC,GAAO,OAC3B,cAAC5B,EAAD,CAAkBF,MAAS8B,OAG5BZ,EAASW,KAAI,SAAAC,GAAO,OACnB,cAACjC,EAAD,CAAkBG,MAASmB,EAAWW,GAAU/B,QAAW,kBAAMyB,EAAYM,KAAiBA,MAG/Ff,EAAec,KAAI,SAAAC,GAAO,OACzB,cAAC3B,EAAD,CAA0BH,MAAS8B,YAS7C,SAASC,EAAmBjC,GAAO,IAAD,EAEEQ,mBAASR,EAAMS,WAFjB,mBAEzBA,EAFyB,aAGED,mBAASR,EAAMU,YAHjB,gCAKIF,mBAASR,EAAMW,OAAOC,MAAM,EAAEZ,EAAMS,aALxC,mBAKzBI,EALyB,aAOQL,mBAASR,EAAMW,OAAOC,MAAMZ,EAAMS,UAAUT,EAAMS,UAAYT,EAAMU,aAP5E,mBAOzBI,EAPyB,aASYN,mBAASO,MAAMN,GAAWO,KAAK,OAT3C,mBASzBC,EATyB,aAWJT,mBAASO,MAAMG,KAAKH,MAAkB,EAAZN,GAAeU,UAXrC,mBAWzBC,EAXyB,aAaIZ,mBAASO,MAAkB,EAAZN,GAAeO,KAAK,OAbvC,mBAazBK,EAbyB,aAeRC,IAAMd,YAArBe,EAfuB,oBAgB1BC,EAAcF,IAAMG,aAAY,kBAAMF,EAAY,MAAK,IAhB7B,EAkBcf,oBAAS,GAlBvB,mBAqB1BkB,GArB0B,UAqBZ,SAACC,GAEC,GAAjBN,EAAWM,GACZN,EAAWM,GAAK,GAEO,GAAjBN,EAAWM,IAGM,KAAjBN,EAAWM,MAFjBN,EAAWM,GAAK,GAMlB,IAAIO,EAAQC,KAAKC,MAAMT,EAAE,GAMzB,GAAyB,MAAtB3B,EAAM4B,aACP,IAAI,IAAID,EAAI,EAAGA,EAAgB,EAAZlB,EAAekB,GAAQ,EACpB,GAAjBN,EAAWM,IAA8B,GAAnBN,EAAWM,EAAE,GACR,GAAzBd,EAAeqB,GAChBjB,EAAeiB,GAAS,EAGxBjB,EAAeiB,GAAS,EAGH,GAAjBb,EAAWM,IAA8B,GAAnBN,EAAWM,EAAE,GACzCV,EAAeiB,GAAS,EAED,GAAjBb,EAAWM,IAA8B,GAAnBN,EAAWM,EAAE,GACzCV,EAAeiB,GAAS,EAED,GAAjBb,EAAWM,IAA8B,GAAnBN,EAAWM,EAAE,KACb,GAAzBd,EAAeqB,GAChBjB,EAAeiB,GAAS,EAGxBjB,EAAeiB,GAAS,QAM3B,GAAyB,MAAtBlC,EAAM4B,aACZ,IAAI,IAAID,EAAI,EAAGA,EAAgB,EAAZlB,EAAekB,GAAQ,EACpB,GAAjBN,EAAWM,IAA8B,GAAnBN,EAAWM,EAAE,GACR,GAAzBd,EAAeqB,GAChBjB,EAAeiB,GAAS,EAGxBjB,EAAeiB,GAAS,EAGH,GAAjBb,EAAWM,IAA8B,GAAnBN,EAAWM,EAAE,GACzCV,EAAeiB,GAAS,EAED,GAAjBb,EAAWM,IAA8B,GAAnBN,EAAWM,EAAE,GACzCV,EAAeiB,GAAS,EAED,GAAjBb,EAAWM,IAA8B,GAAnBN,EAAWM,EAAE,KACzCV,EAAeiB,GAAS,UAMzB,GAAyB,KAAtBlC,EAAM4B,aACZ,IAAI,IAAID,EAAI,EAAGA,EAAgB,EAAZlB,EAAekB,GAAQ,EACpB,GAAjBN,EAAWM,GACZV,EAAeiB,GAAS,EAED,GAAjBb,EAAWM,KACjBV,EAAeiB,GAAS,QAKzB,GAAyB,KAAtBlC,EAAM4B,aACZ,IAAI,IAAID,EAAI,EAAGA,EAAgB,EAAZlB,EAAekB,GAAQ,EACpB,GAAjBN,EAAWM,GACgB,GAAzBd,EAAeqB,GAChBjB,EAAeiB,GAAS,EAGxBjB,EAAeiB,GAAS,EAGH,GAAjBb,EAAWM,KACW,GAAzBd,EAAeqB,GAChBjB,EAAeiB,GAAS,EAGxBjB,EAAeiB,GAAS,GAOhCL,QAAQC,IAAIb,GACZO,MA3H8B,EAgJMhB,oBAAS,GAhJf,mBAgJzB6B,EAhJyB,KAgJZC,EAhJY,KAiJhC,IAAmB,IAAhBD,EAAsB,CACvB,GAAyB,KAAtBrC,EAAM4B,cAA6C,KAAtB5B,EAAM4B,aACpC,IAAI,IAAID,EAAI,EAAGA,EAAgB,EAAZlB,EAAekB,GAAQ,EACxCN,EAAWM,GAAK,IAGpBW,GAAe,GAIjB,OAEE,qBAAK3C,UAAY,MAAjB,SAEE,sBAAKA,UAAY,MAAjB,UACGkB,EAAekB,KAAI,SAAAC,GAAO,OACzB,cAAC7B,EAAD,CAAmBD,MAAS8B,OAG7BlB,EAAiBiB,KAAI,SAAAC,GAAO,OAC3B,cAAC5B,EAAD,CAAkBF,MAAS8B,OAG5Bf,EAAec,KAAI,SAAAC,GAAO,OACzB,cAAC1B,EAAD,CAA4BJ,MAAS8B,OAGtCZ,EAASW,KAAI,SAAAC,GAAO,OACnB,cAACjC,EAAD,CAAkBG,MAASmB,EAAWW,GAAU/B,QAAW,kBAAMyB,EAAYM,KAAiBA,WASxG,SAASO,EAAOvC,GACd,OACE,8BACE,wBAAQL,UAAY,SAApB,SAA8BK,EAAMwC,SA0L3BC,MArLf,WAAgB,IAAD,EACqBjC,mBAAS,GAD9B,mBACNC,EADM,KACKiC,EADL,OAEqBlC,mBAAS,GAF9B,mBAENE,EAFM,KAEKiC,EAFL,OAI2BnC,mBAAS,MAJpC,mBAINoB,EAJM,KAIQgB,EAJR,OAOepC,mBAAS,IAPxB,mBAONqC,EAPM,KAOEC,EAPF,OASyBtC,oBAAS,GATlC,mBASNuC,EATM,KASQC,EATR,OAaexC,mBAAS,IAbxB,mBAaNG,EAbM,KAaEsC,EAbF,OAeW3B,IAAMd,WAArBe,EAfI,oBAiCP2B,GAjBc5B,IAAMG,aAAY,kBAAMF,EAAY,MAAK,IAiBrC,SAAC4B,GAGvB,IAFAA,EAAMA,EAAIC,SAAS,GAEbD,EAAIE,OAAS5C,EAAYC,GAC7ByC,EAAM,EAAIA,EAEZ,OAAOA,EAAIC,SAAS,GAAGE,MAAM,MAiBzBC,EAAa,WAGjB,IAFA,IAAMC,EAAgB,6BAA6BF,MAAM,IACrDG,EAAc,GACV9B,EAAI,EAAGA,EAAIlB,EAAWkB,IAC5B8B,EAAYC,KAAKF,EAAc7B,IAGjC,IAAI,IAAIA,EAAI,EAAGA,EAAIjB,EAAWiB,IAC5B8B,EAAYC,KAAK,SAGnB,IAAI,IAAI/B,EAAI,EAAGA,EAAIlB,EAAWkB,IAC5B8B,EAAYC,KAAKF,EAAc7B,IAGjC,GAAmB,MAAhBC,EACD,IAAI,IAAID,EAAI,EAAGA,EAAIlB,EAAWkB,IAC5B8B,EAAYC,KAAK,IAAMF,EAAc7B,IACrC8B,EAAYC,KAAK,IAAMF,EAAc7B,SAGpC,GAAmB,MAAhBC,EACN,IAAI,IAAID,EAAI,EAAGA,EAAIlB,EAAWkB,IAC5B8B,EAAYC,KAAK,IAAMF,EAAc7B,IACrC8B,EAAYC,KAAK,IAAMF,EAAc7B,SAGpC,GAAmB,KAAhBC,EACN,IAAI,IAAID,EAAI,EAAGA,EAAIlB,EAAWkB,IAC5B8B,EAAYC,KAAK,KACjBD,EAAYC,KAAKF,EAAc7B,SAG9B,GAAmB,KAAhBC,EACN,IAAI,IAAID,EAAI,EAAGA,EAAIlB,EAAWkB,IAC5B8B,EAAYC,KAAK,KACjBD,EAAYC,KAAKF,EAAc7B,IAInCmB,EAAUW,IAhGC,EAyG2BjD,oBAAS,GAzGpC,mBAyGNmD,EAzGM,KAyGQC,EAzGR,KAgHb,OANoB,IAAjBD,GAEDC,GAAgB,GAKhB,sBAAKjE,UAAY,OAAjB,UACE,cAACD,EAAD,IACA,sEACA,wBAAQO,QAAWiD,EAAiBvD,UAAY,gBAAhD,0BACA,wBAAQM,QAhEM,aAgEgBN,UAAY,gBAA1C,mBAEA,wBAAQM,QA5ES,YACC,IAAjB8C,IACDC,GAAc,GACdO,IACAN,EAAUlC,MAAMG,KAAKH,MAAMoB,KAAK0B,IAAI,EAAEpD,EAAYC,IAAYS,WAwE7BxB,UAAY,gBAA7C,2BACA,wBAAQM,QArBO,WACjBgD,EAAU,IACVH,EAAU,IACVE,GAAc,IAkBmBrD,UAAY,gBAA3C,yBAGA,sBAAKA,UAAY,MAAjB,UAEE,sBAAKA,UAAY,SAAjB,UACE,0CACA,sBAAKA,UAAY,MAAjB,UACE,wBAAQM,QAAW,kBAAMyC,EAAajC,EAAY,IAAId,UAAY,iBAAlE,eACA,mCAAMc,EAAN,OACA,wBAAQR,QAAW,kBAAMyC,EAAajC,EAAY,IAAId,UAAY,iBAAlE,qBAIJ,sBAAKA,UAAY,SAAjB,UACE,4CACA,sBAAKA,UAAY,MAAjB,UACE,wBAAQM,QAAW,kBAAM0C,EAAajC,EAAY,IAAIf,UAAY,iBAAlE,eACA,mCAAMe,EAAN,OACA,wBAAQT,QAAW,kBAAM0C,EAAajC,EAAY,IAAIf,UAAY,iBAAlE,qBAIJ,qBAAKA,UAAY,SAAjB,SACE,sBAAKA,UAAY,SAAjB,UACA,gDACE,wBAAQM,QAhIS,WACN,MAAhB2B,EACDgB,EAAgB,MAEM,MAAhBhB,EACNgB,EAAgB,KAEM,KAAhBhB,EACNgB,EAAgB,KAEM,KAAhBhB,GACNgB,EAAgB,OAqH6BjD,UAAY,gBAAnD,SAAoEiC,YAM1E,qEAEA,qBAAKjC,UAAY,MAAjB,SACGkD,EAAOd,KAAI,SAAAC,GAAO,OACjB,cAACO,EAAD,CAAQC,KAAQR,SAGnBrB,EAAOoB,KAAI,SAAAC,GAAO,OAEjB,aADA,CACCzB,EAAD,CAAeI,OAAUuC,EAAgBlB,GAAUvB,UAAaA,EAAWC,UAAaA,EAAWkB,aAAgBA,OAGrH,uEAEA,qBAAKjC,UAAY,MAAjB,SACGkD,EAAOd,KAAI,SAAAC,GAAO,OACjB,cAACO,EAAD,CAAQC,KAAQR,SAGnBrB,EAAOoB,KAAI,SAAAC,GAAO,OAEjB,aADA,CACCC,EAAD,CAAoBtB,OAAUuC,EAAgBlB,GAAUvB,UAAaA,EAAWC,UAAaA,EAAWkB,aAAgBA,WC7jBjHkC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.76c8ff69.chunk.js","sourcesContent":["import React, {useState, useRef} from \"react\";\nimport Tweet from \"./tweet\";\n//import TruthTableButton from \"./ButtonTruthTable\";\n\nfunction TopNav() {\n  return(\n    <div className=\"topnav\">\n      <a href=\"#home\" class=\"active\">Home</a>\n      <a href=\"#news\">News</a>\n      <a href=\"#contact\">Contact</a>\n      <a href=\"#about\">About</a>\n      <a href=\"javascript:void(0);\" class=\"icon\" onclick=\"myFunction()\">\n        <i class=\"fa fa-bars\"></i>\n      </a>\n    </div>\n  )\n}\n\nfunction TruthTableButton(props){\n\n  return(\n    <div>\n      <button onClick = {props.onClick} className = \"button\">{props.value}</button>\n    </div>\n  )\n}\n\nfunction TruthTableNumbers(props){\n\n  return(\n    <div>\n      <button className = \"button\">{props.value}</button>\n    </div>\n  )\n}\n\nfunction TruthTableInputs(props){\n\n  return(\n    <div>\n      <button className = \"truthTablenums\">{props.value}</button>\n    </div>\n  )\n}\n\n\nfunction TruthTableInputFunctions(props){\n\n  return(\n    <div>\n      <button className = \"truthTableInputFunctions\">{props.value}</button>\n    </div>\n  )\n}\n\nfunction TruthTablePresentFunctions(props){\n\n  return(\n    <div>\n      <button className = \"truthTablePresentFunctions\">{props.value}</button>\n    </div>\n  )\n}\n\n\nfunction TruthTableRow(props){\n\n  const [bitsState, setbitsState] = useState(props.bitsState);\n  const [numInputs, setNumInputs] = useState(props.numInputs);\n\n  const [truthTableNums, setTTNums] = useState(props.inputs.slice(0,props.bitsState));\n\n  const [truthTableInputs, setTTInputs] = useState(props.inputs.slice(props.bitsState,props.bitsState + props.numInputs));\n\n  const [inputFunctions, setInputFunctions] = useState(Array(bitsState).fill(\"x\"));\n\n  const [listTest, setList] = useState(Array.from(Array(bitsState).keys()));\n\n  const [truthTable, setTruthTable] = useState(Array(bitsState + numInputs).fill(\"x\"));\n\n  const [, updateState] = React.useState();\n  const forceUpdate = React.useCallback(() => updateState({}), []);\n\n  const [renderedButtons, setRenderedButtons] = useState(false);\n\n\n  const handleClick = (i) => {\n    if(truthTable[i] == 0){\n      truthTable[i] = 1;\n    }\n    else if(truthTable[i] == 1){\n      truthTable[i] = \"x\";\n    }\n    else if(truthTable[i] == \"x\"){\n      truthTable[i] = 0;\n    }\n\n    //FLIP FLOP TYPE DETECT\n\n    //FOR JK FLIP FLOP\n    if(props.flipflopType == \"JK\"){\n      if(truthTableNums[i] == 0 && truthTable[i] == 0){\n        inputFunctions[i] = \"0 x\";\n      }\n      else if(truthTableNums[i] == 0 && truthTable[i] == 1){\n        inputFunctions[i] = \"1 x\";\n      }\n      else if(truthTableNums[i] == 1 && truthTable[i] == 0){\n        inputFunctions[i] = \"x 1\";\n      }\n      else if(truthTableNums[i] == 1 && truthTable[i] == 1){\n        inputFunctions[i] = \"x 0\";\n      }\n      else{\n        inputFunctions[i] = \"x\";\n      }\n    }\n    //FOR SR FLIP FLOP\n    else if(props.flipflopType == \"SR\"){\n      if(truthTableNums[i] == 0 && truthTable[i] == 0){\n        inputFunctions[i] = \"0 x\";\n      }\n      else if(truthTableNums[i] == 0 && truthTable[i] == 1){\n        inputFunctions[i] = \"1 0\";\n      }\n      else if(truthTableNums[i] == 1 && truthTable[i] == 0){\n        inputFunctions[i] = \"0 1\";\n      }\n      else if(truthTableNums[i] == 1 && truthTable[i] == 1){\n        inputFunctions[i] = \"x 0\";\n      }\n      else{\n        inputFunctions[i] = \"x\";\n      }\n    }\n\n    //FOR D FLIP FLOP\n    else if(props.flipflopType == \"D\"){\n      if(truthTableNums[i] == 0 && truthTable[i] == 0){\n        inputFunctions[i] = \"0\";\n      }\n      else if(truthTableNums[i] == 0 && truthTable[i] == 1){\n        inputFunctions[i] = \"1\";\n      }\n      else if(truthTableNums[i] == 1 && truthTable[i] == 0){\n        inputFunctions[i] = \"0\";\n      }\n      else if(truthTableNums[i] == 1 && truthTable[i] == 1){\n        inputFunctions[i] = \"1\";\n      }\n      else{\n        inputFunctions[i] = \"x\";\n      }\n    }\n\n    //FOR T FLIP FLOP\n    else if(props.flipflopType == \"T\"){\n      if(truthTableNums[i] == 0 && truthTable[i] == 0){\n        inputFunctions[i] = \"0\";\n      }\n      else if(truthTableNums[i] == 0 && truthTable[i] == 1){\n        inputFunctions[i] = \"1\";\n      }\n      else if(truthTableNums[i] == 1 && truthTable[i] == 0){\n        inputFunctions[i] = \"1\";\n      }\n      else if(truthTableNums[i] == 1 && truthTable[i] == 1){\n        inputFunctions[i] = \"0\";\n      }\n      else{\n        inputFunctions[i] = \"x\";\n      }\n    }\n    console.log(inputFunctions);\n    forceUpdate();\n  }\n\n  const addItem = (index) => {\n    setList([ ...listTest, {\n      key: listTest.length,\n      value: \"x\",\n      onClick: () => handleClick(listTest.length)\n    }])\n  }\n\n  const createButtons = () => {\n    for(let i = 0; i < 3; i++){\n      addItem(listTest.length);\n    }\n  }\n\n  const consoleLogList = () => {\n    console.log(listTest);\n  }\n\n\n  return(\n    <div className = \"app\">\n      \n      <div className = \"row\">\n        {truthTableNums.map(element => (\n          <TruthTableNumbers value = {element}/>\n        ))}\n\n        {truthTableInputs.map(element => (\n          <TruthTableInputs value = {element}/>\n        ))}\n\n        {listTest.map(element => (\n          <TruthTableButton value = {truthTable[element]} onClick = {() => handleClick(element)} key = {element}/>     \n        ))}\n\n        {inputFunctions.map(element => (\n          <TruthTableInputFunctions value = {element}/>\n        ))}\n        \n      </div>\n    </div>\n  )\n\n}\n\nfunction TruthTableRowTypeB(props){\n\n  const [bitsState, setbitsState] = useState(props.bitsState);\n  const [numInputs, setNumInputs] = useState(props.numInputs);\n\n  const [truthTableNums, setTTNums] = useState(props.inputs.slice(0,props.bitsState));\n\n  const [truthTableInputs, setTTInputs] = useState(props.inputs.slice(props.bitsState,props.bitsState + props.numInputs));\n\n  const [inputFunctions, setInputFunctions] = useState(Array(bitsState).fill(\"x\"));\n\n  const [listTest, setList] = useState(Array.from(Array(bitsState * 2).keys()));\n\n  const [truthTable, setTruthTable] = useState(Array(bitsState * 2).fill(\"x\"));\n\n  const [, updateState] = React.useState();\n  const forceUpdate = React.useCallback(() => updateState({}), []);\n\n  const [renderedButtons, setRenderedButtons] = useState(false);\n\n\n  const handleClick = (i) => {\n\n    if(truthTable[i] == 0){\n      truthTable[i] = 1;\n    }\n    else if(truthTable[i] == 1){\n      truthTable[i] = 0;\n    }\n    else if(truthTable[i] == \"x\"){\n      truthTable[i] = 0;\n    }\n\n    var index = Math.floor(i/2);\n\n\n    //FLIP FLOP TYPE DETECT\n\n    //FOR JK FLIP FLOP\n    if(props.flipflopType == \"JK\"){\n      for(let i = 0; i < bitsState * 2; i = i + 2){\n        if(truthTable[i] == 0 && truthTable[i+1] == 0){\n          if(truthTableNums[index] == 0){\n            inputFunctions[index] = 0;\n          }\n          else{\n            inputFunctions[index] = 1;\n          }      \n        }\n        else if(truthTable[i] == 0 && truthTable[i+1] == 1){\n          inputFunctions[index] = 0;\n        }\n        else if(truthTable[i] == 1 && truthTable[i+1] == 0){\n          inputFunctions[index] = 1;\n        }\n        else if(truthTable[i] == 1 && truthTable[i+1] == 1){\n          if(truthTableNums[index] == 0){\n            inputFunctions[index] = 1;\n          }\n          else{\n            inputFunctions[index] = 0;\n          }\n        }\n      }\n    }\n    //FOR SR FLIP FLOP\n    else if(props.flipflopType == \"SR\"){\n      for(let i = 0; i < bitsState * 2; i = i + 2){\n        if(truthTable[i] == 0 && truthTable[i+1] == 0){\n          if(truthTableNums[index] == 0){\n            inputFunctions[index] = 0;\n          }\n          else{\n            inputFunctions[index] = 1;\n          }      \n        }\n        else if(truthTable[i] == 0 && truthTable[i+1] == 1){\n          inputFunctions[index] = 0;\n        }\n        else if(truthTable[i] == 1 && truthTable[i+1] == 0){\n          inputFunctions[index] = 1;\n        }\n        else if(truthTable[i] == 1 && truthTable[i+1] == 1){\n          inputFunctions[index] = \"?\";\n        }\n      }\n    }\n\n    //FOR D FLIP FLOP\n    else if(props.flipflopType == \"D\"){\n      for(let i = 0; i < bitsState * 2; i = i + 2){\n        if(truthTable[i] == 0){\n          inputFunctions[index] = 0;\n        }\n        else if(truthTable[i] == 1){\n          inputFunctions[index] = 1;\n        }\n      }\n    }\n    //FOR T FLIP FLOP\n    else if(props.flipflopType == \"T\"){\n      for(let i = 0; i < bitsState * 2; i = i + 2){\n        if(truthTable[i] == 0){\n          if(truthTableNums[index] == 0){\n            inputFunctions[index] = 0;\n          }\n          else{\n            inputFunctions[index] = 1;\n          }      \n        }\n        else if(truthTable[i] == 1){\n          if(truthTableNums[index] == 0){\n            inputFunctions[index] = 1;\n          }\n          else{\n            inputFunctions[index] = 0;\n          }      \n        }\n      }\n    }\n\n\n    console.log(inputFunctions);\n    forceUpdate();\n  }\n\n  const addItem = (index) => {\n    setList([ ...listTest, {\n      key: listTest.length,\n      value: \"x\",\n      onClick: () => handleClick(listTest.length)\n    }])\n  }\n\n  const createButtons = () => {\n    for(let i = 0; i < 3; i++){\n      addItem(listTest.length);\n    }\n  }\n\n  const consoleLogList = () => {\n    console.log(listTest);\n  }\n\n  const [constructor, setConstructor] = useState(false);\n  if(constructor === false){\n    if(props.flipflopType == \"D\" || props.flipflopType == \"T\"){\n      for(let i = 1; i < bitsState * 2; i = i + 2){\n        truthTable[i] = \"-\";\n      }\n    }\n    setConstructor(true);\n  }\n\n\n  return(\n\n    <div className = \"app\">\n      \n      <div className = \"row\">\n        {truthTableNums.map(element => (\n          <TruthTableNumbers value = {element}/>\n        ))}\n\n        {truthTableInputs.map(element => (\n          <TruthTableInputs value = {element}/>\n        ))}\n\n        {inputFunctions.map(element => (\n          <TruthTablePresentFunctions value = {element}/>\n        ))}\n\n        {listTest.map(element => (\n          <TruthTableButton value = {truthTable[element]} onClick = {() => handleClick(element)} key = {element}/>     \n        ))}\n        \n      </div>\n    </div>\n  )\n\n}\n\nfunction Labels(props){\n  return(\n    <div>\n      <button className = \"labels\">{props.name}</button>\n    </div>\n  )\n}\n\nfunction App (){\n  const [bitsState, setbitsState] = useState(3);\n  const [numInputs, setNumInputs] = useState(1);\n\n  const [flipflopType, setFlipflopType] = useState(\"JK\");\n  \n\n  const [labels, setLabels] = useState([]);\n\n  const [isTableShown, setTableShown] = useState(false);\n\n  //const [inputs, setInputs] = useState(Array.from(Array(Math.pow(2,bitsState + numInputs)).keys()));\n\n  const [inputs, setInputs] = useState([]);\n\n  const [, updateState] = React.useState();\n  const forceUpdate = React.useCallback(() => updateState({}), []);\n\n  const changeFlipFlopType = () => {\n    if(flipflopType == \"JK\"){\n      setFlipflopType(\"SR\");\n    }\n    else if(flipflopType == \"SR\"){\n      setFlipflopType(\"D\");\n    }\n    else if(flipflopType == \"D\"){\n      setFlipflopType(\"T\");\n    }\n    else if(flipflopType == \"T\"){\n      setFlipflopType(\"JK\");\n    }\n  }\n\n  const convertToBinary = (dec) => {\n    dec = dec.toString(2);\n    \n    while(dec.length < bitsState + numInputs){\n      dec = 0 + dec;\n    }\n    return dec.toString(2).split(\"\");\n    \n  }\n\n  const displayTable = () => {\n    if(isTableShown === false){\n      setTableShown(true);\n      makeLabels();\n      setInputs(Array.from(Array(Math.pow(2,bitsState + numInputs)).keys()));\n      //console.log(inputs); \n    }\n    \n  }\n\n  const debugFunc = () => {\n  }\n\n  const makeLabels = () => {\n    const alphabetArray = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".split(\"\");\n    var labelAppend = [];\n    for(let i = 0; i < bitsState; i++){\n      labelAppend.push(alphabetArray[i])\n    }\n\n    for(let i = 0; i < numInputs; i++){\n      labelAppend.push(\"Input\")\n    }\n\n    for(let i = 0; i < bitsState; i++){\n      labelAppend.push(alphabetArray[i])\n    }\n\n    if(flipflopType == \"JK\"){\n      for(let i = 0; i < bitsState; i++){\n        labelAppend.push(\"J\" + alphabetArray[i])\n        labelAppend.push(\"K\" + alphabetArray[i])\n      }\n    }\n    else if(flipflopType == \"SR\"){\n      for(let i = 0; i < bitsState; i++){\n        labelAppend.push(\"S\" + alphabetArray[i])\n        labelAppend.push(\"R\" + alphabetArray[i])\n      }\n    }\n    else if(flipflopType == \"D\"){\n      for(let i = 0; i < bitsState; i++){\n        labelAppend.push(\"D\")\n        labelAppend.push(alphabetArray[i])\n      }\n    }\n    else if(flipflopType == \"T\"){\n      for(let i = 0; i < bitsState; i++){\n        labelAppend.push(\"T\")\n        labelAppend.push(alphabetArray[i])\n      }\n    }\n    \n    setLabels(labelAppend);\n  }\n\n  const resetTable = () => {\n    setInputs([]);\n    setLabels([]);\n    setTableShown(false);\n  }\n  \n  const [renderLabels, setRenderLabels] = useState(false);\n  if(renderLabels === false){\n    //makeLabels();\n    setRenderLabels(true);\n  }\n\n\n  return(\n    <div className = \"main\">\n      <TopNav/>\n      <h1>Flip flop Excitation Table Generator</h1>\n      <button onClick = {convertToBinary} className = \"generalButton\">BINARY TEST!</button>\n      <button onClick = {debugFunc} className = \"generalButton\">DEBUG</button>\n      {/* <button onClick = {makeLabels} className = \"generalButton\">LABEL TEST</button> */}\n      <button onClick = {displayTable} className = \"generalButton\">DISPLAY TABLE</button>\n      <button onClick = {resetTable} className = \"generalButton\">RESET TABLE</button>\n      \n\n      <div className = \"row\">\n\n        <div className = \"option\">\n          <h2>Set Bits</h2>\n          <div className = \"row\">\n            <button onClick = {() => setbitsState(bitsState - 1)} className = \"truthTablenums\">-</button>\n            <h1> {bitsState} </h1>\n            <button onClick = {() => setbitsState(bitsState + 1)} className = \"truthTablenums\">+</button>\n          </div>\n        </div>\n\n        <div className = \"option\">\n          <h2>Set Inputs</h2>\n          <div className = \"row\">\n            <button onClick = {() => setNumInputs(numInputs - 1)} className = \"truthTablenums\">-</button>\n            <h1> {numInputs} </h1>\n            <button onClick = {() => setNumInputs(numInputs + 1)} className = \"truthTablenums\">+</button>\n          </div>\n        </div>\n\n        <div className = \"option\">\n          <div className = \"column\">\n          <h2>Flip Flop Type</h2>\n            <button onClick = {changeFlipFlopType} className = \"generalButton\">{flipflopType}</button>\n          </div>\n        </div>\n        \n      </div>\n\n      <h1>Type A Table (Modify Present State)</h1>\n      \n      <div className = \"row\">\n        {labels.map(element => (\n          <Labels name = {element}/>\n        ))}\n      </div>\n      {inputs.map(element => (\n        //<TruthTableRow inputs = {convertToBinary(element)} bitsState = {bitsState} numInputs = {numInputs} flipflopType = {flipflopType}/>\n        <TruthTableRow inputs = {convertToBinary(element)} bitsState = {bitsState} numInputs = {numInputs} flipflopType = {flipflopType}/>\n      ))}\n\n      <h1>Type B Table (Modify Input Functions)</h1>\n      \n      <div className = \"row\">\n        {labels.map(element => (\n          <Labels name = {element}/>\n        ))}\n      </div>\n      {inputs.map(element => (\n        //<TruthTableRow inputs = {convertToBinary(element)} bitsState = {bitsState} numInputs = {numInputs} flipflopType = {flipflopType}/>\n        <TruthTableRowTypeB inputs = {convertToBinary(element)} bitsState = {bitsState} numInputs = {numInputs} flipflopType = {flipflopType}/>\n      ))}\n      \n    </div>\n  )\n}\n\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}